import re
import os
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
from storage.storage import get_recipe, add_to_history
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üîÅ –°–ª–æ–≤–Ω–∏–∫ —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤ ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤–∏ –¥–æ —ñ–º–µ–Ω –∑ recipe.json
RECIPE_ALIASES = {
    "—Ö–ª—ñ–±": "–±—ñ–ª–∏–π —Ö–ª—ñ–±",
    "—Ö–ª—ñ–±—ñ–≤": "–±—ñ–ª–∏–π —Ö–ª—ñ–±",
    "–±—ñ–ª–∏—Ö": "–±—ñ–ª–∏–π —Ö–ª—ñ–±",
    "–±—ñ–ª–∏–π": "–±—ñ–ª–∏–π —Ö–ª—ñ–±",
    "—Ñ–æ–∫–∞—á": "—Ñ–æ–∫–∞—á–∞",
    "—Ñ–æ–∫–∞—á—ñ": "—Ñ–æ–∫–∞—á–∞",
    "—Ñ–æ–∫–∞—á–∞": "—Ñ–æ–∫–∞—á–∞"
}

async def handle_production_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()
    recipes = get_recipe()

    # üîç –®—É–∫–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ —Å–ª–æ–≤–æ, —è–∫–µ –º–æ–∂–µ –±—É—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–æ–º
    match = re.search(r"(—Å—å–æ–≥–æ–¥–Ω—ñ|—Å–µ–≥–æ–¥–Ω—è)?\s*(\d+)\s+(\w+)", user_text)
    if match:
        quantity = int(match.group(2))
        raw_name = match.group(3)

        # üéØ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ª–æ–≤–∞ –¥–æ –Ω–∞–∑–≤–∏ —Ä–µ—Ü–µ–ø—Ç—É
        recipe_name = RECIPE_ALIASES.get(raw_name)

        if recipe_name and recipe_name in recipes:
            single_recipe = recipes[recipe_name]
            full_ingredients = {
                ingredient: round(amount * quantity)
                for ingredient, amount in single_recipe.items()
            }

            lines = [f"üßÆ –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ {quantity} {recipe_name} –ø–æ—Ç—Ä—ñ–±–Ω–æ:"]
            for ingredient, total in full_ingredients.items():
                lines.append(f"‚Ä¢ {ingredient}: {total} –≥")

            await update.message.reply_text("\n".join(lines))

            # üìù –ó–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            add_to_history({
                "type": "–≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ",
                "recipe": recipe_name,
                "quantity": quantity,
                "datetime": datetime.now().strftime("%Y-%m-%d %H:%M"),
                "ingredients_used": full_ingredients
            })
            return

    # üß† –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî GPT
    try:
        print("üîß GPT –ó–ê–ü–ò–¢:", user_text)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
