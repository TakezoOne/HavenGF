import re
import os
from telegram import Update
from telegram.ext import ContextTypes
from datetime import datetime
from storage.storage import get_recipe, add_to_history
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

async def handle_production_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()
    recipes = get_recipe()

    # üîç –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –ø–∞—Ç–µ—Ä–Ω –∑ —É—Å—ñ—Ö –Ω–∞–∑–≤ —Ä–µ—Ü–µ–ø—Ç—ñ–≤
    pattern = r"(—Å—å–æ–≥–æ–¥–Ω—ñ|—Å–µ–≥–æ–¥–Ω—è)?\s*(\d+)\s+(" + "|".join(recipes.keys()) + r")"
    match = re.search(pattern, user_text)

    if match:
        quantity = int(match.group(2))
        recipe_name = match.group(3)

        if recipe_name not in recipes:
            await update.message.reply_text(f"‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç '{recipe_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        single_recipe = recipes[recipe_name]
        full_ingredients = {
            ingredient: round(amount * quantity)
            for ingredient, amount in single_recipe.items()
        }

        lines = [f"üßÆ –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ {quantity} {recipe_name} –ø–æ—Ç—Ä—ñ–±–Ω–æ:"]
        for ingredient, total in full_ingredients.items():
            lines.append(f"‚Ä¢ {ingredient}: {total} –≥")

        await update.message.reply_text("\n".join(lines))

        # üìù –ó–∞–ø–∏—Å —É —ñ—Å—Ç–æ—Ä—ñ—é
        add_to_history({
            "type": "–≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ",
            "recipe": recipe_name,
            "quantity": quantity,
            "datetime": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "ingredients_used": full_ingredients
        })
        return

    # üß† GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—å
    try:
        print("üîß GPT –ó–ê–ü–ò–¢:", user_text)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –ø–µ–∫–∞—Ä—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ. –ü—Ä–∞—Ü—é–π —Ç—ñ–ª—å–∫–∏ –∑ –≤–∏—Ä–æ–±–Ω–∏—á–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏."},
                {"role": "user", "content": user_text}
            ]
        )
        reply = response.choices[0].message.content.strip()
        print("üîß GPT –í–Ü–î–ü–û–í–Ü–î–¨:", reply)

        if reply:
            await update.message.reply_text(reply)
        else:
            await update.message.reply_text("ü§ñ GPT –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
    except Exception as e:
        print("‚ùå GPT ERROR:", e)
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ GPT: " + str(e))
