import os
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from openai import OpenAI

# ‚úÖ –í–ü–ò–°–ê–ù–ù–´–ï –ö–õ–Æ–ß–ò
TG_TOKEN = "7915029504:AAE7yFJxud86Mh1SX7HcSEqgMGjiyGMBnDE"
OPENAI_KEY = "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"
client = OpenAI(api_key=OPENAI_KEY)

# üìÇ –ò–º–ø–æ—Ä—Ç –∫–æ–º–∞–Ω–¥
from commands.returns import handle_return
from commands.need_to_buy import handle_need_to_buy
from commands.set_minimum import handle_set_minimum

# === –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running!")

def run_fake_web_server():
    port = int(os.environ.get("PORT", 10000))
    server = HTTPServer(("", port), PingHandler)
    server.serve_forever()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –ø–µ–∫–∞—Ä–Ω—ñ. –ù–∞–ø–∏—à–∏ /help –∞–±–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –ø–∏—Ç–∞–Ω–Ω—è.")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è [–Ω–∞–∑–≤–∞] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å] ‚Äî –∑–∞–ø–∏—Å –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ü—ñ—ó\n"
        "/shcho_kupyty ‚Äî —Å–ø–∏—Å–æ–∫ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤, —è–∫–∏—Ö –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î\n"
        "/minimum [–Ω–∞–∑–≤–∞] [–∫—ñ–ª—å–∫—ñ—Å—Ç—å] ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º –¥–ª—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∞\n"
        "–ê–±–æ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é!"
    )

# GPT-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
async def gpt_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ ‚Äî —Ä–æ–∑—É–º–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –ø–µ–∫–∞—Ä—è. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é, –∫–æ—Ä–æ—Ç–∫–æ —ñ –ø–æ —Å—É—Ç—ñ. –ü—Ä–∞—Ü—é–π —Ç—ñ–ª—å–∫–∏ –∑ –≤–∏—Ä–æ–±–Ω–∏—á–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏."},
                {"role": "user", "content": user_message}
            ]
        )
        reply = response.choices[0].message.content
        print("GPT –í–Ü–î–ü–û–í–Ü–î–¨:", reply)
        await update.message.reply_text(reply)
    except Exception as e:
        print("GPT Error:", repr(e))
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT.")

# –ó–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
threading.Thread(target=run_fake_web_server, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TG_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(handle_return)
app.add_handler(handle_need_to_buy)
app.add_handler(handle_set_minimum)
app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), gpt_answer))
app.run_polling()
